name: Deploy

on:
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: us-east-1
  SST_STAGE: prod

jobs:
  deploy:
    name: SST deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Free disk space (pre)
        shell: bash
        run: |
          echo "Before cleanup" && df -h || true
          sudo swapoff -a || true
          sudo rm -f /swapfile || true
          sudo docker system prune -af --volumes || true
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf /opt/ghc || true
          sudo rm -rf /opt/hostedtoolcache/CodeQL || true
          sudo apt-get clean || true
          pip cache purge || true
          rm -rf ~/.cache || true
          echo "After cleanup" && df -h || true

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (for SST)
        uses: actions/setup-node@v4
        with:
          node-version: "24"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Node deps
        run: bun install --frozen-lockfile

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Create virtualenv
        run: uv venv -p 3.11 .venv

      - name: Sync Python workspace deps
        run: uv sync --frozen --all-extras

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: SST deploy
        env:
          SST_TELEMETRY_DISABLED: "1"
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_DEFAULT_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_DEFAULT_ACCOUNT_ID }}
        run: bun sst deploy --stage $SST_STAGE | cat

      - name: Cleanup (post)
        if: always()
        shell: bash
        run: |
          docker system prune -af --volumes || true
          rm -rf ~/.cache || true
          df -h || true
